{"version":3,"sources":["App.js","buttonsArr.js","serviceWorker.js","index.js"],"names":["portfolio","className","href","text","id","footer","Formula","props","displayFormula","Output","output","Button","button","class","onClick","value","display","handleButton","Buttons","buttons","buttonsArr","map","key","type","App","useState","setOutput","formula","setFormula","setDisplayFormula","numArr","toString","replace","split","currentNum","length","percentage","reversePercentage","formulaWithPercentage","slice","concat","formulaReversePercentage","displayDelString","delString","test","handleOutput","removeOpBeforeEquals","testMultipleOps","testEmptyDisplay","decimalTest","parseFloat","string","Math","round","eval","lastChar","op","answer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e73ba7ce.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.scss\";\r\nimport buttonsArr from \"./buttonsArr\";\r\nimport { FiDelete } from \"react-icons/fi\";\r\nimport { RiArrowGoBackLine } from \"react-icons/ri\";\r\n\r\nconst portfolio = (\r\n  <a\r\n    className=\"portfolio\"\r\n    href=\"http://www.sunkenworld.com/about/\"\r\n  >\r\n    <p className=\"portfolio-text\">\r\n      <RiArrowGoBackLine /> Back to portfolio\r\n    </p>\r\n  </a>\r\n);\r\n\r\nconst text = (\r\n  <div id=\"text\">\r\n    <h2>This Calculator is better than yours.</h2>\r\n    <p>\r\n      Sorry, that was rude. What I mean is, most calculator\r\n      apps kind of suck. They're rudimentary, inflexible,\r\n      and just not that useful.\r\n    </p>\r\n    <p>But not this one. </p>\r\n    <p>\r\n      This one lets you see your entire formula and\r\n      dynamically renders the output in a seperate display.\r\n      Achieving this is more complicated than it sounds. For\r\n      one, the formula displayed is not the same as the one\r\n      used for calculations. To this end, a display formula\r\n      and a computational formula need to be maintained at\r\n      all times. So a formula that looks like this\r\n    </p>\r\n    <code>55ร15%รท9</code>\r\n    <p>is actually computing this</p>\r\n    <code>55*0.15/9</code>\r\n    <p>\r\n      As you might be able to imagine, this makes\r\n      percentages particularly tricky. Especially when the\r\n      delete button is factored in (easily the most\r\n      complicated button). But I believe all of this effort\r\n      is worthwhile, as the results are intuitive,\r\n      functional, and powerful, as I hope you'll agree.\r\n    </p>\r\n    <p>\r\n      If you want to learn more, check out the README and\r\n      code over on{\" \"}\r\n      <a href=\"https://github.com/mackenziewritescode/calculator\">\r\n        Github\r\n      </a>\r\n      .\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst footer = (\r\n  <footer id=\"footer\">\r\n    <p>\r\n      This site was made by{\" \"}\r\n      <a\r\n        className=\"footer-link\"\r\n        href=\"http://www.sunkenworld.com/about/\"\r\n      >\r\n        Mackenzie Charlton\r\n      </a>{\" \"}\r\n      in 2020 with{\" \"}\r\n      <a className=\"footer-link\" href=\"https://reactjs.org\">\r\n        React\r\n      </a>\r\n      .\r\n    </p>\r\n  </footer>\r\n);\r\n\r\nfunction Formula(props) {\r\n  return <div id=\"formula\">{props.displayFormula}</div>;\r\n}\r\n\r\nfunction Output(props) {\r\n  return <div id=\"output\">{props.output}</div>;\r\n}\r\n\r\nfunction Button(props) {\r\n  const handleClick = (value, display) => {\r\n    props.handleButton(value, display);\r\n  };\r\n\r\n  const button = props.button;\r\n\r\n  return (\r\n    <button\r\n      className={button.class}\r\n      onClick={() =>\r\n        handleClick(button.value, button.display)\r\n      }\r\n    >\r\n      {button.display === \"Del\" ? (\r\n        <FiDelete />\r\n      ) : (\r\n        button.display\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Buttons(props) {\r\n  const buttons = buttonsArr.map((button) => (\r\n    <Button\r\n      button={button}\r\n      key={button.value}\r\n      value={button.value}\r\n      display={button.display}\r\n      type={button.type}\r\n      className={button.class}\r\n      handleButton={props.handleButton}\r\n    />\r\n  ));\r\n  return <div id=\"buttonWrap\">{buttons}</div>;\r\n}\r\n\r\nfunction App(props) {\r\n  const [output, setOutput] = useState(\"0\");\r\n  const [formula, setFormula] = useState(\"0\");\r\n  const [displayFormula, setDisplayFormula] = useState(\"\");\r\n\r\n  const handleButton = (value, display) => {\r\n    const numArr = formula\r\n      .toString()\r\n      .replace(/[-/*+=]/g, \" \")\r\n      .split(\" \");\r\n    const currentNum = numArr[numArr.length - 1];\r\n    const percentage = (currentNum / 100).toString();\r\n    const reversePercentage = (currentNum * 100).toString();\r\n    const formulaWithPercentage = formula\r\n      .toString()\r\n      .slice(0, -currentNum.length)\r\n      .concat(percentage);\r\n    const formulaReversePercentage = formula\r\n      .toString()\r\n      .slice(0, -currentNum.length)\r\n      .concat(reversePercentage);\r\n    const displayDelString = displayFormula\r\n      .slice(0, -1)\r\n      .toString();\r\n    const delString = formula.toString().slice(0, -1);\r\n\r\n    switch (value) {\r\n      case \"C\":\r\n        setDisplayFormula(\"\");\r\n        setFormula(\"0\");\r\n        setOutput(\"0\");\r\n        break;\r\n      case \"Del\":\r\n        if (displayFormula.length <= 1) {\r\n          //------------------------- if there's only 1 char, set to 0\r\n          setDisplayFormula(\"0\");\r\n          setFormula(\"0\");\r\n          setOutput(\"0\");\r\n        } else if (\r\n          // ----------------------- if the only char is an operator, set to 0\r\n          formula.length <= 3 &&\r\n          /[-/*+=]/.test(formula[1]) === true &&\r\n          formula[0] === 0\r\n        ) {\r\n          setDisplayFormula(\"0\");\r\n          setFormula(\"0\");\r\n          setOutput(\"0\");\r\n        } else if (\r\n          // ----------------- if the last char is %, multiply last char by 100\r\n          displayFormula.toString().slice(-1) === \"%\"\r\n        ) {\r\n          setDisplayFormula(displayDelString);\r\n          setFormula(formulaReversePercentage);\r\n          handleOutput(formulaReversePercentage);\r\n        } else {\r\n          setDisplayFormula(displayDelString);\r\n          setFormula(delString);\r\n          handleOutput(delString);\r\n        }\r\n        break;\r\n      case \"=\":\r\n        setDisplayFormula(removeOpBeforeEquals(formula));\r\n        setFormula(removeOpBeforeEquals(formula));\r\n        break;\r\n      case \"%\":\r\n        if (\r\n          testMultipleOps(formula) ||\r\n          displayFormula.toString().slice(-1) === \"%\" ||\r\n          formula.toString() === \"0\"\r\n        ) {\r\n          setDisplayFormula(displayFormula);\r\n          setFormula(formula);\r\n        } else {\r\n          setDisplayFormula(displayFormula + \"%\");\r\n          setFormula(formulaWithPercentage);\r\n          handleOutput(formulaWithPercentage);\r\n        }\r\n        break;\r\n      case \"+\":\r\n      case \"-\":\r\n      case \"*\":\r\n      case \"/\":\r\n        if (\r\n          testMultipleOps(formula) ||\r\n          testEmptyDisplay(displayFormula, value)\r\n        ) {\r\n          setDisplayFormula(displayFormula);\r\n          setFormula(formula);\r\n        } else {\r\n          setDisplayFormula(displayFormula + display);\r\n          setFormula(formula + value);\r\n        }\r\n        break;\r\n      case \".\":\r\n        if (!decimalTest(formula, currentNum)) {\r\n          setDisplayFormula(displayFormula + \".\");\r\n          setFormula(formula + \".\");\r\n        }\r\n        break;\r\n      default:\r\n        if (formula === \"0\") {\r\n          setDisplayFormula(display);\r\n          setFormula(value);\r\n          handleOutput(parseFloat(value));\r\n        } else {\r\n          setDisplayFormula(displayFormula + display);\r\n          setFormula(formula + value);\r\n          handleOutput(formula + value);\r\n        }\r\n    }\r\n  };\r\n\r\n  function removeOpBeforeEquals(string) {\r\n    if (testMultipleOps(string)) {\r\n      return (\r\n        Math.round(\r\n          10000000000 * eval(string.slice(0, -1))\r\n        ) / 10000000000\r\n      ).toString();\r\n\r\n      //return eval(string.slice(0, -1)).toString();\r\n    } else {\r\n      return (\r\n        Math.round(10000000000 * eval(string)) / 10000000000\r\n      ).toString();\r\n      //return eval(string).toString();\r\n    }\r\n  }\r\n\r\n  function testMultipleOps(string) {\r\n    let opRegex = /[-/*+=]/g;\r\n    let lastChar = string.toString().slice(-1);\r\n    if (opRegex.test(lastChar)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function decimalTest(formula, currentNum) {\r\n    let lastChar = formula.toString().slice(-1);\r\n    // test if the last char is % or if there's already a decimal\r\n    if (lastChar === \"%\" || /\\./.test(currentNum)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function testEmptyDisplay(string, op) {\r\n    if (string === \"\" && /[+*/]/.test(op)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function handleOutput(string) {\r\n    let answer;\r\n    if (testMultipleOps(string)) {\r\n      answer = (\r\n        Math.round(\r\n          10000000000 * eval(string.slice(0, -1))\r\n        ) / 10000000000\r\n      ).toString();\r\n    } else {\r\n      answer = (\r\n        Math.round(10000000000 * eval(string)) / 10000000000\r\n      ).toString();\r\n    }\r\n    if (answer === \"NaN\") {\r\n      answer = 0;\r\n    }\r\n\r\n    setOutput(answer);\r\n  }\r\n\r\n  return (\r\n    <div id=\"wrapper\">\r\n      {portfolio}\r\n      <div id=\"content\">\r\n        <div id=\"calculator\">\r\n          <Formula displayFormula={displayFormula} />\r\n          <Output output={output} />\r\n          <Buttons handleButton={handleButton} />\r\n          {/* <div id=\"debugFormula\">{formula}</div> */}\r\n        </div>\r\n        {text}\r\n      </div>\r\n      {footer}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const buttonsArr = [\r\n  {\r\n    value: \"C\",\r\n    display: \"C\",\r\n    type: \"modifier\",\r\n    class: \"clearBtn\",\r\n  },\r\n  {\r\n    value: \"Del\",\r\n    display: \"Del\",\r\n    type: \"modifier\",\r\n    class: \"delBtn\",\r\n  },\r\n  {\r\n    value: \"%\",\r\n    display: \"%\",\r\n    type: \"modifier\",\r\n    class: \"topBtn\",\r\n  },\r\n  {\r\n    value: \"/\",\r\n    display: \"รท\",\r\n    type: \"operator\",\r\n    class: \"rightBtn\",\r\n  },\r\n  {\r\n    value: \"7\",\r\n    display: \"7\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"8\",\r\n    display: \"8\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"9\",\r\n    display: \"9\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"*\",\r\n    display: \"ร\",\r\n    type: \"operator\",\r\n    class: \"rightBtn\",\r\n  },\r\n  {\r\n    value: \"4\",\r\n    display: \"4\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"5\",\r\n    display: \"5\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"6\",\r\n    display: \"6\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"-\",\r\n    display: \"โ\",\r\n    type: \"operator\",\r\n    class: \"rightBtn\",\r\n  },\r\n  {\r\n    value: \"1\",\r\n    display: \"1\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"2\",\r\n    display: \"2\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"3\",\r\n    display: \"3\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"+\",\r\n    display: \"+\",\r\n    type: \"operator\",\r\n    class: \"rightBtn\",\r\n  },\r\n  {\r\n    value: \"0\",\r\n    display: \"0\",\r\n    type: \"number\",\r\n    class: \"zeroBtn\",\r\n  },\r\n  {\r\n    value: \".\",\r\n    display: \".\",\r\n    type: \"number\",\r\n    class: \"mainBtn\",\r\n  },\r\n  {\r\n    value: \"=\",\r\n    display: \"=\",\r\n    type: \"modifier\",\r\n    class: \"equalsBtn\",\r\n  },\r\n];\r\n\r\nexport default buttonsArr;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}